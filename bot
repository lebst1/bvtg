import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = '7114542919:AAF8Ct5Ag7YBhaDolTfVBcvZXSOloR4_8zs'
MODERATION_CHAT_ID = -4534707255
CHANNEL_ID = '@baraxolka_kamenka'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class AdForm(StatesGroup):
    name = State()
    description = State()
    price = State()
    contact = State() 
    photo = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
keyboard_start = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_start.add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
keyboard_photo = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_photo.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'), KeyboardButton('–î–∞–ª–µ–µ'))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
keyboard_send = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_send.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'), KeyboardButton('–ù–∞–∑–∞–¥'))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã –ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/help</b>', reply_markup=keyboard_start, parse_mode='HTML')

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>".\n  –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∏—Ö –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ —Å—Ä–∞–∑—É –≤—Å–µ\n –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –Ω–∞–ª–∏—á–∏–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!', parse_mode='HTML')

@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def create_ad(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
    await AdForm.name.set()

@dp.message_handler(state=AdForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
    await AdForm.next()

@dp.message_handler(state=AdForm.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
    await AdForm.next()

@dp.message_handler(state=AdForm.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Ç–≥ –¥–ª—è —Å–≤—è–∑–∏:', reply_markup=types.ReplyKeyboardRemove())
    await AdForm.next() 

@dp.message_handler(state=AdForm.contact) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def process_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ! (–¥–æ 5)', reply_markup=keyboard_photo)
    await AdForm.next()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', state=AdForm.photo)
async def add_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ photos, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if 'photos' not in data:
            data['photos'] = []
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"', reply_markup=keyboard_photo)

@dp.message_handler(content_types=['photo'], state=AdForm.photo)
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photos'].append(message.photo[-1].file_id)
        await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"', reply_markup=keyboard_photo)

@dp.message_handler(lambda message: message.text == '–î–∞–ª–µ–µ', state=AdForm.photo)
async def send_ad(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'photos' not in data or not data['photos']:
            await message.answer('–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å! üì∏')
            return
         
        text = f"<b>–ü–†–û–î–ê–ú!</b>\n" \
               f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n" \
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n" \
               f"<b>–¶–µ–Ω–∞:</b> {data['price']}\n" \
               f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}"
         
        media = types.MediaGroup()
        first_photo = True
        for photo in data['photos']:
            if first_photo:
                media.attach(types.InputMediaPhoto(media=photo, caption=text, parse_mode='HTML'))
                first_photo = False
            else:
                media.attach(types.InputMediaPhoto(media=photo))
        await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! üéâ', reply_markup=keyboard_send)
        await state.finish()


@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', state=None)
async def confirm_send(message: types.Message):
    await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üéâ')

@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥', state=None)
async def back_to_start(message: types.Message):
    await message.answer('–ù–∞–∑–∞–¥', reply_markup=keyboard_start)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
